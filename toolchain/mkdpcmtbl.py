#!/usr/bin/env python3
import argparse
from itertools import islice
from typing import Callable, List

GENERATOR_STRING = """
; ==============================================================
; --------------------------------------------------------------
; Mega PCM 2.0
;
; DPCM Delta conversion tables
; --------------------------------------------------------------
; WARNING! This file was auto-generated by `mkdpcmtbl`.
; --------------------------------------------------------------
; (c) 2023-2024, Vladikcomper
; --------------------------------------------------------------

"""

# Default DPCM delta table used across Sonic drivers
default_deltas = [
	0, 1, 2, 4, 8, 0x10, 0x20, 0x40,
	-0x80, -1, -2, -4, -8, -0x10, -0x20, -0x40
]

def deltatable(rawtable: str):
	table = list(map(lambda n: int(n), rawtable.split(';')))
	if len(table) != 16:
		raise ValueError('Delta table should specify 16 elements.')
	return table


"""
`itertoools.batched` polyfill from Python 3.12
"""
def batched(iterable, n):
    it = iter(iterable)
    while batch := tuple(islice(it, n)):
        yield batch

"""
Converts a number to Z80 byte
"""
def valueToZ80Byte(value: int) -> str:
	if value < 0:
		value = 0x100+value
	if value < 0 or value > 255:
		raise Exception(f'Expected a byte. Got: {value:d}')
	return f'0{value:02X}h'


"""
Controls program usage and gets command line arguments
"""
def getArgs():
	parser = argparse.ArgumentParser(
		description='Generates DPCM delta tables.'
	)
	parser.add_argument('outputFilename', type=str)
	parser.add_argument('-t', '--table', nargs=16, type=int, default=default_deltas,
		help='Custom delta table to use (decimal numbers, comma-separated)'
	)
	parser.add_argument('-l', '--bytesPerLine', type=int, default=16,
		help='Number of byts per line in the output file'
	)
	args = parser.parse_args()

	return args

"""
Generate a nibble table (256 bytes)
"""
def generateTable(deltaTable: List[int], nibbleFunction: Callable[[int], int]):
	for value in range(0, 256):
		yield deltaTable[nibbleFunction(value)]


def main():
	# Get command-line arguments
	args = getArgs()

	with open(args.outputFilename, 'w') as outfile:
		outfile.write(GENERATOR_STRING)

		outfile.write('\t; Nibble 0 conversion table\n')
		for line_bytes in batched(generateTable(args.table, lambda v: (v & 0xF0) >> 4), args.bytesPerLine):
			outfile.write('\tdb\t' + ','.join(map(valueToZ80Byte, line_bytes)) + '\n')
		outfile.write(f'\n')

		outfile.write('\t; Nibble 1 conversion table\n')
		for line_bytes in batched(generateTable(args.table, lambda v: (v & 0xF)), args.bytesPerLine):
			outfile.write('\tdb\t' + ','.join(map(valueToZ80Byte, line_bytes)) + '\n')
		outfile.write(f'\n')


if __name__ == '__main__':
	main()
