#!/usr/bin/env python3
import argparse
from itertools import islice

GENERATOR_STRING = """
; ==============================================================
; --------------------------------------------------------------
; Mega PCM 2.0
;
; Volume tables data
; --------------------------------------------------------------
; WARNING! This file was auto-generated by `mkvolume`.
; --------------------------------------------------------------
; (c) 2023, Vladikcomper
; --------------------------------------------------------------

"""

"""
`itertoools.batched` polyfill from Python 3.12
"""
def batched(iterable, n):
    it = iter(iterable)
    while batch := tuple(islice(it, n)):
        yield batch

"""
Converts a number to Z80 byte
"""
def valueToZ80Byte(value: int) -> str:
	if value < 0 or value > 255:
		raise Exception(f'Expected an unsigned byte. Got: {value:d}')
	return f'0{value:02X}h'


"""
Controls program usage and gets command line arguments
"""
def getArgs():
	parser = argparse.ArgumentParser(
		description='Generates volume table data.'
	)
	parser.add_argument('outputFilename', type=str)
	parser.add_argument('-n', '--numLevels', type=int, default=16,
		help='Number of volume level to generate'
	)
	parser.add_argument('-l', '--bytesPerLine', type=int, default=16,
		help='Number of volume level to generate'
	)
	args = parser.parse_args()

	return args


"""
Generate a volume table (256 bytes)
"""
def generateTable(volumeLevel: int, maxLevel: int):
	for value in range(0, 256):
		yield int(0x80 + (value - 0x80) * (volumeLevel / maxLevel))


def main():
	# Get command-line arguments
	args = getArgs()

	with open(args.outputFilename, 'w') as outfile:
		outfile.write(GENERATOR_STRING)

		for volumeIndex, volumeLevel in enumerate(range(15, -1, -1)):
			outfile.write(f'\t; Volume table {volumeIndex:02X} (volume={volumeLevel:d})\n')

			for line_bytes in batched(generateTable(volumeLevel, args.numLevels - 1), args.bytesPerLine):
				outfile.write('\tdb\t' + ','.join(map(valueToZ80Byte, line_bytes)) + '\n')

			outfile.write(f'\n')


if __name__ == '__main__':
	main()
